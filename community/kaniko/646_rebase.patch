diff -aur a/Makefile b/Makefile
--- a/Makefile	2020-01-18 05:46:16.000000000 +1100
+++ b/Makefile	2020-01-20 11:45:01.636670645 +1100
@@ -18,10 +18,11 @@
 VERSION_BUILD ?= 0
 
 VERSION ?= v$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_BUILD)
+VERSION_PACKAGE = $(REPOPATH/pkg/version)
 
 SHELL := /bin/bash
 GOOS ?= $(shell go env GOOS)
-GOARCH = amd64
+GOARCH ?= $(shell go env GOARCH)
 ORG := github.com/GoogleContainerTools
 PROJECT := kaniko
 REGISTRY?=gcr.io/kaniko-project
@@ -38,7 +39,7 @@
 EXECUTOR_PACKAGE = $(REPOPATH)/cmd/executor
 WARMER_PACKAGE = $(REPOPATH)/cmd/warmer
 KANIKO_PROJECT = $(REPOPATH)/kaniko
-BUILD_ARG ?= 
+BUILD_ARG ?=
 
 # Force using Go Modules and always read the dependencies from
 # the `vendor` folder.
@@ -62,9 +63,9 @@
 
 .PHONY: images
 images:
-	docker build ${BUILD_ARG} -t $(REGISTRY)/executor:latest -f deploy/Dockerfile .
-	docker build ${BUILD_ARG} -t $(REGISTRY)/executor:debug -f deploy/Dockerfile_debug .
-	docker build ${BUILD_ARG} -t $(REGISTRY)/warmer:latest -f deploy/Dockerfile_warmer .
+	docker build ${BUILD_ARG} --build-arg=GOARCH=$(GOARCH) -t $(REGISTRY)/executor:latest -f deploy/Dockerfile .
+	docker build ${BUILD_ARG} --build-arg=GOARCH=$(GOARCH) -t $(REGISTRY)/executor:debug -f deploy/Dockerfile_debug .
+	docker build ${BUILD_ARG} --build-arg=GOARCH=$(GOARCH) -t $(REGISTRY)/warmer:latest -f deploy/Dockerfile_warmer .
 
 .PHONY: push
 push:
diff -aur a/deploy/Dockerfile b/deploy/Dockerfile
--- a/deploy/Dockerfile	2020-01-18 05:46:16.000000000 +1100
+++ b/deploy/Dockerfile	2020-01-20 11:45:01.636670645 +1100
@@ -15,6 +15,7 @@
 # Builds the static Go image to execute in a Kubernetes job
 
 FROM golang:1.12
+ARG GOARCH=amd64
 WORKDIR /go/src/github.com/GoogleContainerTools/kaniko
 # Get GCR credential helper
 ADD https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v1.5.0/docker-credential-gcr_linux_amd64-1.5.0.tar.gz /usr/local/bin/
@@ -28,7 +29,7 @@
 RUN tar -C /usr/local/bin/ -xvzf /usr/local/bin/docker-credential-acr-linux-amd64.tar.gz
 
 COPY . .
-RUN make
+RUN make GOARCH=${GOARCH}
 
 FROM scratch
 COPY --from=0 /go/src/github.com/GoogleContainerTools/kaniko/out/executor /kaniko/executor
diff -aur a/deploy/Dockerfile_debug b/deploy/Dockerfile_debug
--- a/deploy/Dockerfile_debug	2020-01-18 05:46:16.000000000 +1100
+++ b/deploy/Dockerfile_debug	2020-01-20 11:45:01.636670645 +1100
@@ -16,6 +16,7 @@
 
 # Stage 0: Build the executor binary and get credential helpers
 FROM golang:1.12
+ARG GOARCH=amd64
 WORKDIR /go/src/github.com/GoogleContainerTools/kaniko
 # Get GCR credential helper
 ADD https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v1.5.0/docker-credential-gcr_linux_amd64-1.5.0.tar.gz /usr/local/bin/
@@ -25,7 +26,7 @@
 RUN go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login
 RUN make -C /go/src/github.com/awslabs/amazon-ecr-credential-helper linux-amd64 
 COPY . .
-RUN make && make out/warmer
+RUN make GOARCH=${GOARCH} && make out/warmer
 
 # Stage 1: Get the busybox shell
 FROM gcr.io/cloud-builders/bazel:latest
diff -aur a/deploy/Dockerfile_warmer b/deploy/Dockerfile_warmer
--- a/deploy/Dockerfile_warmer	2020-01-18 05:46:16.000000000 +1100
+++ b/deploy/Dockerfile_warmer	2020-01-20 11:45:01.636670645 +1100
@@ -15,6 +15,7 @@
 # Builds the static Go image to execute in a Kubernetes job
 
 FROM golang:1.12
+ARG GOARCH=amd64
 WORKDIR /go/src/github.com/GoogleContainerTools/kaniko
 # Get GCR credential helper
 ADD https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v1.5.0/docker-credential-gcr_linux_amd64-1.5.0.tar.gz /usr/local/bin/
@@ -25,7 +26,7 @@
 RUN make -C /go/src/github.com/awslabs/amazon-ecr-credential-helper linux-amd64
 
 COPY . .
-RUN make out/warmer
+RUN make GOARCH=${GOARCH} out/warmer
 
 FROM scratch
 COPY --from=0 /go/src/github.com/GoogleContainerTools/kaniko/out/warmer /kaniko/warmer
diff -aur a/pkg/util/image_util.go b/pkg/util/image_util.go
--- a/pkg/util/image_util.go	2020-01-18 05:46:16.000000000 +1100
+++ b/pkg/util/image_util.go	2020-01-20 11:45:01.636670645 +1100
@@ -134,7 +134,10 @@
 		}
 	}
 
-	return []remote.Option{remote.WithTransport(tr), remote.WithAuthFromKeychain(creds.GetKeychain())}
+	// on which v1.Platform is this currently running?
+	platform := currentPlatform()
+
+	return []remote.Option{remote.WithTransport(tr), remote.WithAuthFromKeychain(creds.GetKeychain()), remote.WithPlatform(platform)}
 }
 
 func cachedImage(opts *config.KanikoOptions, image string) (v1.Image, error) {
diff -aur a/pkg/util/util.go b/pkg/util/util.go
--- a/pkg/util/util.go	2020-01-18 05:46:16.000000000 +1100
+++ b/pkg/util/util.go	2020-01-20 11:45:01.636670645 +1100
@@ -22,6 +22,7 @@
 	"encoding/hex"
 	"io"
 	"os"
+	"runtime"
 	"strconv"
 	"sync"
 	"syscall"
@@ -29,6 +30,8 @@
 	"github.com/minio/highwayhash"
 	"github.com/pkg/errors"
 	"github.com/sirupsen/logrus"
+
+	"github.com/google/go-containerregistry/pkg/v1"
 )
 
 // ConfigureLogging sets the logrus logging level and forces logs to be colorful (!)
@@ -138,3 +141,11 @@
 	}
 	return hex.EncodeToString(hasher.Sum(make([]byte, 0, hasher.Size()))), nil
 }
+
+// CurrentPlatform returns the v1.Platform on which the code runs
+func currentPlatform() v1.Platform {
+	return v1.Platform{
+		OS:           runtime.GOOS,
+		Architecture: runtime.GOARCH,
+	}
+}
